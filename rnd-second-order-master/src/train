#!/usr/bin/env python3

import inspect
import sys
from abc import ABC, abstractmethod
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, Tuple

from loguru import logger

from experiment.artifacts import SecondOrderArtifacts as ExperimentArtifacts
from experiment.dataset import SecondOrderDataset as Dataset
from experiment.experiment import SecondOrderExperiment as Experiment
import experiment.model as models
from utils.arg_parser import TrainArgParser


class Trainer(ABC):

    @abstractmethod
    def setup(self):
        pass

    @abstractmethod
    def run(self):
        pass


@dataclass
class SecondOrderTrainer(Trainer):

    def __init__(self):
        arg_parser = TrainArgParser()
        self.args = arg_parser.get_arguments()

    def __get_models_classes(self) -> Dict[str, models.MLModel]:
        models_classes = inspect.getmembers(
            models,
            lambda cls:
                inspect.isclass(cls) and 
                not inspect.isabstract(cls) and
                issubclass(cls, models.MLModel)
        )
        logger.info(models_classes)
        return models_classes

    def setup(self):
        channel_name = 'raw'
        raw_data_dir = self.args.input_dir / 'data' / channel_name
        raw_data_dir.mkdir(parents=True, exist_ok=True)

        assert channel_name in self.args.channel_names
        dataset_dir = self.args.input_dir / 'data' / channel_name
        dataset_dir.mkdir(parents=True, exist_ok=True)

        raw_data_path = raw_data_dir / 'data.parquet'

        dataset = Dataset(
            data_path=raw_data_path,
        )
        logger.info("Dataset will be preprocessed for training.")
        dataset.load()

        self.dataset = dataset
        models_classes = self.__get_models_classes()
        self.models = {model_name: model_class() for model_name, model_class in models_classes}

    def run(self):
        artifacts_handler = ExperimentArtifacts(
            output_dir=self.args.output_dir,
            model_dir=self.args.model_dir,
        )
        for _, model in self.models.items():
            experiment = Experiment(
                model=model,
                dataset=self.dataset,
                artifacts_handler=artifacts_handler,
                hyperparameters=self.args.hyperparameters,
                run_tag=self.args.run_tag,
            )
            experiment.setup()
            experiment.run()


if __name__ == '__main__':
    logger.info(f"Begin train.py")

    trainer = SecondOrderTrainer()
    trainer.setup()
    trainer.run()

    logger.info(f"End train.py")
    sys.exit(0)
