
version: 2.1

orbs:
    slack: circleci/slack@3.4.2
    aws-cli: circleci/aws-cli@1.0.0

executors:
    python-executor:
        docker:
            - image: circleci/python:3.6-buster
        environment:
            PIPENV_VENV_IN_PROJECT: true
        resource_class: medium

workflows:
    version: 2
    build-test-deploy:
        jobs:
        - download-dependencies
        - python-lint:
            requires:
                - download-dependencies
        - python-test:
            requires:
                - download-dependencies
        - python-coverage:
            requires:
                - download-dependencies
        - docker-lint
        - build-and-push-image:
            requires:
                - python-lint
                - python-test
                - docker-lint
            filters:
                tags:
                    only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        - slack-training-approval:
            requires:
                - build-and-push-image
            filters:
                tags:
                    only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        - approve-training-job:
            type: approval
            requires:
                - build-and-push-image
            filters:
                tags:
                    only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        - training-job:
            requires:
                - approve-training-job
            filters:
                tags:
                    only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - verify-training:
        #     requires:
        #         - training-job
        #     triggers:
        #         - schedule:
        #             cron: "0 0 * * *"
        #     filters:
        #         branches:
        #             only:
        #             - master
        #         tags:
        #             only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - test-hypothesis:
        #     requires:
        #         - verify-training
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - slack-staging-approval:
        #     requires:
        #         - test-hypothesis
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - approve-staging:
        #     type: approval
        #     requires:
        #         - test-hypothesis
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - deploy-staging:
        #     requires:
        #         - approve-staging
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - slack-live-approval:
        #     requires:
        #         - deploy-staging
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
        # - approve-live:
        #     type: approval
        #     requires:
        #         - deploy-staging
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/
            # # - deploy-live:
        #     requires:
        #         - approve-live
            # filters:
            #     branches:
            #         only:
            #         - master
            #     tags:
            #         only: /(v[0-9]+\.[0-9]+\.[0-9]+)/

jobs:
    download-dependencies:
        executor: python-executor
        steps:
            - checkout
            - restore_cache:
                keys:
                    - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - run:
                name: install dependencies
                command: |
                    pipenv install --dev
            - save_cache:
                key: deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
                paths:
                    - ".venv"

    python-lint:
        executor: python-executor
        steps:
            - checkout
            - restore_cache:
                keys:
                    - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - run:
                name: Run Application lint
                command: |
                    make lint

    python-test:
        executor: python-executor
        steps:
            - checkout
            - restore_cache:
                keys:
                    - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - run:
                name: Run Application tests
                command: |
                    make test

    python-coverage:
        executor: python-executor
        steps:
            - checkout
            - restore_cache:
                keys:
                    - deps9-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
            - run:
                name: Test coverage
                command: |
                    make coverage-report
            - store_artifacts:
                path: htmlcov

    docker-lint:
        machine: true
        steps:
            - checkout
            - run:
                name: Lint Dockerfile
                command: |
                    make docker-lint \
                        DOCKERFILE_PATH=docker/Dockerfile.training.gpu

    build-and-push-image:
        executor: aws-cli/default
        steps:
            - checkout
            - aws-cli/setup
            - setup_remote_docker:
                docker_layer_caching: true
            - run:
                name: Build Image
                command: |
                    make build-image \
                        DOCKERFILE_PATH=docker/Dockerfile.training.gpu
            - run:
                name: Release Image
                command: |
                    make release-image DOCKER_SERVER=$DOCKER_SERVER
                    make release-image DOCKER_SERVER=$DOCKER_SERVER IMAGE_TAG_PUSH=latest

    slack-training-approval:
        machine: true
        steps:
            - slack/notify:
                channel: 'research-circleci'
                color: '#2bff05'
                mentions: 'ricoms'
                message: |
                    [${CIRCLE_USERNAME}] Please check and approve Jobs to manually deploy AWS Sagemaker training job.
                    https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}
                webhook: '${SLACK_WEBHOOK}'

    training-job:
        executor: aws-cli/default
        steps:
            - checkout
            - aws-cli/setup
            - run:
                name: Submit Training Job
                command: |
                    mkdir -p /tmp/workspace
                    make sagemaker-training-job AWS_SAGEMAKER_ROLE=$AWS_SAGEMAKER_ROLE AWS_PROJECT_BUCKET=$AWS_PROJECT_BUCKET > /tmp/workspace/training_job_output.json
            - persist_to_workspace:
                root: /tmp/workspace
                paths:
                - training_job_output.json

    # verify-training:
    #     executor: python-executor
    #     steps:
    #         - attach_workspace:
    #             # Must be absolute path or relative path from working_directory
    #             at: /tmp/workspace
    #         - checkout
    #         - run:
    #             name: Describe Training Job
    #             command: |
    #                 export training_job_name=$(sed -n 's/.*\"TrainingJobArn\": \"\(.*\)\".*/\1/p' /tmp/workspace/training_job_output.json)
    #                 aws sagemaker describe-training-job --training-job-name $training_job_name > /tmp/workspace/job_status.json
    #                 export job_status=$(sed -n 's/.*\"TrainingJobStatus\": \"\(.*\)\".*/\1/p' /tmp/workspace/job_status.json)

    #         - run:
    #             name: Verify job status
    #             command: |
    #                 export job_status=$(sed -n 's/.*\"TrainingJobStatus\": \"\(.*\)\".*/\1/p' /tmp/workspace/job_status.json)

    #                 if [ "$job_status" == "Completed" ]; then
    #                     echo "Creating model for training job"
    #                     exit 0
    #                 else
    #                     if [ "$job_status" == "Failed" ]; then
    #                         echo "Training job failed"
    #                         exit 1
    #                     else
    #                         echo "Just keep verifying"
    #                     fi
    #                 fi
