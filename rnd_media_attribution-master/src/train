#!/usr/bin/env python

import sys
from abc import ABC, abstractmethod

from loguru import logger

from experiment.artifacts import ArtifactsHandler as ExperimentArtifacts
from experiment.dataset import DatasetHandler as Dataset
from experiment.experiment import AttentionExperiment as Experiment
from experiment.model import AttentionModel
from utils.arg_parser import TrainArgParser


class Trainer(ABC):

    @abstractmethod
    def setup(self):
        pass

    @abstractmethod
    def run(self):
        pass


class SrcTrainer(Trainer):

    def __init__(self):
        arg_parser = TrainArgParser()
        self.args = arg_parser.get_arguments()

    def setup(self):
        channel_name = 'raw'
        raw_data_dir = self.args.input_dir / 'data' / channel_name
        raw_data_dir.mkdir(parents=True, exist_ok=True)

        raw_data_path = raw_data_dir / \
            'M_A_dataset_twoweek_crm.csv'
        if raw_data_path.exists():
            # maxlen_threshold = \
            #     self.args.hyperparameters.pop('maxlen_threshold', 0.98)
            max_seq_len = \
                self.args.hyperparameters.pop('max_seq_len', 15)
            max_memory_usage = \
                self.args.hyperparameters.pop('max_memory_usage', 10000)
            dataset = Dataset(
                data_path=raw_data_path,
                max_memory_usage=max_memory_usage,
                # maxlen_threshold=maxlen_threshold
                max_seq_len=max_seq_len
            )
            dataset.load(
                chunksize=(
                    self.args.hyperparameters.pop('chunksize', 100000)
                    )
            )
        else:
            logger.error(f"Data is not available at {raw_data_dir}.")
            sys.exit(255)
        self.dataset = dataset
        self.model = AttentionModel()

    def run(self):
        artifacts_handler = ExperimentArtifacts(
            output_dir=self.args.output_dir,
            model_dir=self.args.model_dir,
        )
        experiment = Experiment(
            model=self.model,
            dataset=self.dataset,
            artifacts_handler=artifacts_handler,
            hyperparameters=self.args.hyperparameters,
            run_tag=self.args.run_tag,
        )
        experiment.setup()
        experiment.run()


if __name__ == '__main__':
    logger.info("Begin train.py")

    trainer = SrcTrainer()
    trainer.setup()
    trainer.run()

    logger.info("End train.py")
    sys.exit(0)
